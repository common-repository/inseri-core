(()=>{"use strict";const e=JSON.parse('[{"label":"JSON","value":"application/json","ext":["json"]},{"label":"JSON-LD","value":"application/ld+json","ext":["jsonld"]},{"label":"XML","value":"application/xml","ext":["xml"]},{"label":"Text","value":"text/plain","ext":["txt"]},{"label":"HTML","value":"text/html","ext":["html","htm"]},{"label":"CSV","value":"text/csv","ext":["csv"]},{"label":"Markdown","value":"text/markdown","ext":["md","markdown"]},{"label":"SVG","value":"image/svg+xml","ext":["svg","svgz"]},{"label":"Python","value":"text/x-python","ext":["py"]},{"label":"R","value":"text/x-r","ext":["r"]},{"label":"JavaScript","value":"text/javascript","ext":["js","mjs","cjs"]},{"label":"TypeScript","value":"application/typescript","ext":["ts"]},{"label":"SQL","value":"application/sql","ext":["sql"]},{"label":"YAML","value":"application/yaml","ext":["yml","yaml"]},{"label":"TOML","value":"application/toml","ext":["toml"]}]'),a=JSON.parse('[{"label":"GIF","value":"image/gif","ext":["gif"]},{"label":"JPEG","value":"image/jpeg","ext":["jpg","jpeg"]},{"label":"PNG","value":"image/png","ext":["png"]},{"label":"WebP","value":"image/webp","ext":["webp"]},{"label":"TIFF","value":"image/tiff","ext":["tif","tiff"]},{"label":"AVIF","value":"image/avif","ext":["avif"]},{"label":"HEIC","value":"image/heif","ext":["heif"]},{"label":"PDF","value":"application/pdf","ext":["pdf"]},{"label":"MP3","value":"audio/mp3","ext":["mp3"]},{"label":"WebM (audio)","value":"audio/webm","ext":["weba"]},{"label":"MP4","value":"video/mp4","ext":["mp4"]},{"label":"WebM (video)","value":"video/webm","ext":["webm"]},{"label":"MPEG","value":"video/mpg","ext":["mpg"]},{"label":"Zip","value":"application/zip","ext":["zip"]},{"label":"TAR","value":"application/x-tar","ext":["tar"]},{"label":"GZip","value":"application/gzip","ext":["gz"]},{"label":"BZip2","value":"application/x-bzip2","ext":["bz2"]},{"label":"7-Zip","value":"application/x-7z-compressed","ext":["7z"]},{"label":"Form-urlencoded","value":"application/x-www-form-urlencoded","ext":[]},{"label":"Form-data","value":"multipart/form-data","ext":[]},{"label":"Any Binary","value":"application/octet-stream","ext":["bin"]},{"label":"old Word","value":"application/msword","ext":["doc"]},{"label":"Word","value":"application/vnd.openxmlformats-officedocument.wordprocessingml.document","ext":["docx"]},{"label":"old Excel","value":"application/vnd.ms-excel","ext":["xls"]},{"label":"Excel","value":"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet","ext":["xlsx"]},{"label":"old PowerPoint","value":"application/vnd.ms-powerpoint","ext":["ppt"]},{"label":"PowerPoint","value":"application/vnd.openxmlformats-officedocument.presentationml.presentation","ext":["pptx"]}]'),l=e.map((({ext:e,...a})=>({...a}))),t=([...e,...a].map((({ext:e,...a})=>({...a}))),[...e,...a].flatMap((e=>e.ext.map((a=>({ext:a,value:e.value})))))),o=l.map((e=>e.value)),i="https://cdn.jsdelivr.net/pyodide/v0.26.2/full/";importScripts(i+"pyodide.js");let n=null,p={},s=[];const r=[],c="/home/pyodide/";let u=!1;function d(e){return Array.from(e).map((e=>e instanceof Set?d(e):e))}function x(e){const a=n.globals.get(e);let l=a;try{return a instanceof n.ffi.PyProxy&&(l=a.toJs({dict_converter:Object.fromEntries}),a.destroy()),l instanceof Set&&(l=d(l)),l instanceof n.ffi.PyProxy?(r.push(e+" is not JSON serializable"),[e,null]):(l instanceof Uint8Array&&(l=new Blob([l])),[e,l])}catch(a){const l=a instanceof Error?a.message:e+": unknown type conversion error ocurred";return r.push(l),[e,null]}}onmessage=({data:e})=>{"RUN_CODE"===e.type&&async function(e){try{if(n){var a;r.splice(0,r.length),postMessage({type:"STATUS",payload:"in-progress"}),Object.entries(p).forEach((async([e,a])=>{let l=a;l instanceof Blob&&(l=await l.arrayBuffer()),n?.globals.set(e,n.toPy(l))})),await n.loadPackagesFromImports(e),await n.runPythonAsync(e);const l=s.map(x).reduce(((e,[a,l])=>(e[a]=l,e)),{}),i=null!==(a=(await n.FS.lookupPath(c)).node.contents)&&void 0!==a?a:{},u=Object.values(i).filter((e=>n?.FS.isFile(e.mode))),d=await async function(e,a,l){return(await Promise.all(e.map((async e=>{var i;const n=a+e.name,p=e.name.split(".")[1],s=null!==(i=(e=>{const a=t.find((a=>e===a.ext));if(a)return a.value})(p))&&void 0!==i?i:"application/octet-stream",r=await l.FS.readFile(n);l.FS.unlink(n);let c=new Blob([r],{type:s});return u=s,(o.includes(u)||u.startsWith("text/"))&&(c=await c.text()),"json"===p&&(c=JSON.parse(c)),[e.name,s,c];var u})))).reduce(((e,[a,l,t])=>({...e,[a]:[l,t]})),{})}(u,c,n);postMessage({type:"SET_RESULTS",payload:l,files:d})}}catch(e){const a=e instanceof Error?e.message:"unknown error ocurred";r.push(a)}finally{postMessage({type:"SET_STD_STREAM",payload:r.filter(Boolean).join("\n")}),postMessage({type:"STATUS",payload:"ready"})}}(e.payload),"SET_INPUTS"===e.type&&(p=e.payload,u||(u=!0,n&&postMessage({type:"STATUS",payload:"ready"}))),"SET_OUTPUTS"===e.type&&(s=e.payload)},async function(){n=await loadPyodide({indexURL:i,stdout:e=>r.push(e),stderr:e=>r.push(e)}),u&&postMessage({type:"STATUS",payload:"ready"})}()})();